C51 COMPILER V9.55   F330_FLASHUTILS                                                       06/14/2018 23:18:53 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE F330_FLASHUTILS
OBJECT MODULE PLACED IN .\Objects\F330_FlashUtils.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE F33x\F330_FlashUtils.c OPTIMIZE(9,SPEED) BROWSE INCDIR(.\driver;.\F33x;.
                    -\RFFC) DEBUG OBJECTEXTEND PRINT(.\Listings\F330_FlashUtils.lst) TABS(2) OBJECT(.\Objects\F330_FlashUtils.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F330_FlashUtils.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2004 Silicon Laboratories, Inc.
   5          //
   6          // This program contains several useful utilities for writing and updating
   7          // FLASH memory.
   8          //
   9          // AUTH: BW & GP
  10          // DATE: 21 JUL 04
  11          //
  12          // Target: C8051F33x
  13          // Tool chain: KEIL C51 7.06
  14          //
  15          // Release 1.0
  16          //
  17          
  18          //-----------------------------------------------------------------------------
  19          // Includes
  20          //-----------------------------------------------------------------------------
  21          
  22          #include "F330_FlashPrimitives.h"
  23          #include "F330_FlashUtils.h"
  24          
  25          //-----------------------------------------------------------------------------
  26          // Structures, Unions, Enumerations, and Type Definitions
  27          //-----------------------------------------------------------------------------
  28          
  29          //-----------------------------------------------------------------------------
  30          // Global Constants
  31          //-----------------------------------------------------------------------------
  32          
  33          //-----------------------------------------------------------------------------
  34          // Function Prototypes
  35          //-----------------------------------------------------------------------------
  36          
  37          // FLASH read/write/erase routines
  38          void FLASH_Write (FLADDR dest, char *src, unsigned numbytes);
  39          char * FLASH_Read (char *dest, FLADDR src, unsigned numbytes);
  40          void FLASH_Clear (FLADDR addr, unsigned numbytes);
  41          
  42          // FLASH update/copy routines
  43          void FLASH_Update (FLADDR dest, char *src, unsigned numbytes);
  44          void FLASH_Copy (FLADDR dest, FLADDR src, unsigned numbytes);
  45          
  46          // FLASH test routines
  47          void FLASH_Fill (FLADDR addr, ULONG length, UCHAR fill);
  48          
  49          //-----------------------------------------------------------------------------
  50          // Global Variables
  51          //-----------------------------------------------------------------------------
  52          
  53          //-----------------------------------------------------------------------------
  54          // FLASH Routines
C51 COMPILER V9.55   F330_FLASHUTILS                                                       06/14/2018 23:18:53 PAGE 2   

  55          //-----------------------------------------------------------------------------
  56          
  57          //-----------------------------------------------------------------------------
  58          // FLASH_Clear
  59          //-----------------------------------------------------------------------------
  60          //
  61          // This routine erases <numbytes> starting from the FLASH addressed by
  62          // <dest> by performing a read-modify-write operation using <FLASH_TEMP> as
  63          // a temporary holding area.  This function accepts <numbytes> up to
  64          // <FLASH_PAGESIZE>.
  65          //
  66          void FLASH_Clear (FLADDR dest, unsigned numbytes)
  67          {
  68   1         FLADDR dest_1_page_start;           // first address in 1st page
  69   1                                             // containing <dest>
  70   1         FLADDR dest_1_page_end;             // last address in 1st page
  71   1                                             // containing <dest>
  72   1         FLADDR dest_2_page_start;           // first address in 2nd page
  73   1                                             // containing <dest>
  74   1         FLADDR dest_2_page_end;             // last address in 2nd page
  75   1                                             // containing <dest>
  76   1         unsigned numbytes_remainder;        // when crossing page boundary,
  77   1                                             // number of <src> bytes on 2nd page
  78   1         unsigned FLASH_pagesize;            // size of FLASH page to update
  79   1      
  80   1         FLADDR  wptr;                       // write address
  81   1         FLADDR  rptr;                       // read address
  82   1      
  83   1         unsigned length;
  84   1      
  85   1         FLASH_pagesize = FLASH_PAGESIZE;
  86   1      
  87   1         dest_1_page_start = dest & ~(FLASH_pagesize - 1);
  88   1         dest_1_page_end = dest_1_page_start + FLASH_pagesize - 1;
  89   1         dest_2_page_start = (dest + numbytes)  & ~(FLASH_pagesize - 1);
  90   1         dest_2_page_end = dest_2_page_start + FLASH_pagesize - 1;
  91   1      
  92   1         if (dest_1_page_end == dest_2_page_end) {
  93   2      
  94   2            // 1. Erase Scratch page
  95   2            FLASH_PageErase (FLASH_TEMP);
  96   2      
  97   2            // 2. Copy bytes from first byte of dest page to dest-1 to Scratch page
  98   2      
  99   2            wptr = FLASH_TEMP;
 100   2            rptr = dest_1_page_start;
 101   2            length = dest - dest_1_page_start;
 102   2            FLASH_Copy (wptr, rptr, length);
 103   2      
 104   2            // 3. Copy from (dest+numbytes) to dest_page_end to Scratch page
 105   2      
 106   2            wptr = FLASH_TEMP + dest - dest_1_page_start + numbytes;
 107   2            rptr = dest + numbytes;
 108   2            length = dest_1_page_end - dest - numbytes + 1;
 109   2            FLASH_Copy (wptr, rptr, length);
 110   2      
 111   2            // 4. Erase destination page
 112   2            FLASH_PageErase (dest_1_page_start);
 113   2      
 114   2            // 5. Copy Scratch page to destination page
 115   2            wptr = dest_1_page_start;
 116   2            rptr = FLASH_TEMP;
C51 COMPILER V9.55   F330_FLASHUTILS                                                       06/14/2018 23:18:53 PAGE 3   

 117   2            length = FLASH_pagesize;
 118   2            FLASH_Copy (wptr, rptr, length);
 119   2      
 120   2         } else {                            // value crosses page boundary
 121   2            // 1. Erase Scratch page
 122   2            FLASH_PageErase (FLASH_TEMP);
 123   2      
 124   2            // 2. Copy bytes from first byte of dest page to dest-1 to Scratch page
 125   2      
 126   2            wptr = FLASH_TEMP;
 127   2            rptr = dest_1_page_start;
 128   2            length = dest - dest_1_page_start;
 129   2            FLASH_Copy (wptr, rptr, length);
 130   2      
 131   2            // 3. Erase destination page 1
 132   2            FLASH_PageErase (dest_1_page_start);
 133   2      
 134   2            // 4. Copy Scratch page to destination page 1
 135   2            wptr = dest_1_page_start;
 136   2            rptr = FLASH_TEMP;
 137   2            length = FLASH_pagesize;
 138   2            FLASH_Copy (wptr, rptr, length);
 139   2      
 140   2            // now handle 2nd page
 141   2      
 142   2            // 5. Erase Scratch page
 143   2            FLASH_PageErase (FLASH_TEMP);
 144   2      
 145   2            // 6. Copy bytes from numbytes remaining to dest-2_page_end to Scratch page
 146   2      
 147   2            numbytes_remainder = numbytes - (dest_1_page_end - dest + 1);
 148   2            wptr = FLASH_TEMP + numbytes_remainder;
 149   2            rptr = dest_2_page_start + numbytes_remainder;
 150   2            length = FLASH_pagesize - numbytes_remainder;
 151   2            FLASH_Copy (wptr, rptr, length);
 152   2      
 153   2            // 7. Erase destination page 2
 154   2            FLASH_PageErase (dest_2_page_start);
 155   2      
 156   2            // 8. Copy Scratch page to destination page 2
 157   2            wptr = dest_2_page_start;
 158   2            rptr = FLASH_TEMP;
 159   2            length = FLASH_pagesize;
 160   2            FLASH_Copy (wptr, rptr, length);
 161   2         }
 162   1      }
 163          
 164          
 165          //-----------------------------------------------------------------------------
 166          // FLASH_Update
 167          //-----------------------------------------------------------------------------
 168          //
 169          // This routine replaces <numbytes> from <src> to the FLASH addressed by
 170          // <dest>.  This function calls FLASH_Clear() to handle the dirty work of
 171          // initializing all <dest> bytes to 0xff's prior to copying the bytes from
 172          // <src> to <dest>. This function accepts <numbytes> up to <FLASH_PAGESIZE>.
 173          //
 174          void FLASH_Update (FLADDR dest, char *src, unsigned numbytes)
 175          {
 176   1         // 1. Erase <numbytes> starting from <dest>
 177   1         FLASH_Clear (dest, numbytes);
 178   1      
C51 COMPILER V9.55   F330_FLASHUTILS                                                       06/14/2018 23:18:53 PAGE 4   

 179   1         // 2. Write <numbytes> from <src> to <dest>
 180   1         FLASH_Write (dest, src, numbytes);
 181   1      }
 182          
 183          
 184          //-----------------------------------------------------------------------------
 185          // FLASH_Write
 186          //-----------------------------------------------------------------------------
 187          //
 188          // This routine copies <numbytes> from <src> to the linear FLASH address
 189          // <dest>.
 190          //
 191          void FLASH_Write (FLADDR dest, char *src, unsigned numbytes)
 192          {
 193   1         FLADDR i;
 194   1      
 195   1         for (i = dest; i < dest+numbytes; i++) {
 196   2            FLASH_ByteWrite (i, *src++);
 197   2         }
 198   1      }
 199          
 200          //-----------------------------------------------------------------------------
 201          // FLASH_Read
 202          //-----------------------------------------------------------------------------
 203          //
 204          // This routine copies <numbytes> from the linear FLASH address <src> to
 205          // <dest>.
 206          //
 207          char * FLASH_Read (char *dest, FLADDR src, unsigned numbytes)
 208          {
 209   1         FLADDR i;
 210   1      
 211   1         for (i = 0; i < numbytes; i++) {
 212   2            *dest++ = FLASH_ByteRead (src+i);
 213   2         }
 214   1         return dest;
 215   1      }
 216          
 217          //-----------------------------------------------------------------------------
 218          // FLASH_Copy
 219          //-----------------------------------------------------------------------------
 220          //
 221          // This routine copies <numbytes> from <src> to the linear FLASH address
 222          // <dest>.
 223          //
 224          void FLASH_Copy (FLADDR dest, FLADDR src, unsigned numbytes)
 225          {
 226   1         FLADDR i;
 227   1      
 228   1         for (i = 0; i < numbytes; i++) {
 229   2      
 230   2            FLASH_ByteWrite ((FLADDR) dest+i, FLASH_ByteRead((FLADDR) src+i));
 231   2         }
 232   1      }
 233          
 234          
 235          //-----------------------------------------------------------------------------
 236          // FLASH_Fill
 237          //-----------------------------------------------------------------------------
 238          //
 239          // This routine fills the FLASH beginning at <addr> with <lenght> bytes.
 240          //
C51 COMPILER V9.55   F330_FLASHUTILS                                                       06/14/2018 23:18:53 PAGE 5   

 241          void FLASH_Fill (FLADDR addr, ULONG length, UCHAR fill)
 242          {
 243   1         FLADDR i;
 244   1      
 245   1         for (i = 0; i < length; i++) {
 246   2            FLASH_ByteWrite (addr+i, fill);
 247   2         }
 248   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    675    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      60
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
